Aufgabe_2_4_a ((a|ε)b*)*
[+] Parsing expression
[+] Parse succsessfull
     ((a|ε)b*)*
[+] Building NFA
[*] Alternative with L( (a|ε) ):
NFA = (S, Σ, δ, s0, F)
S = [q0, q1, q2, q3, q4, q5]
Σ = [a, ε]
δ = [q0 x 'ε' → [q1, q2],
     q1 x 'ε' → [q3],
     q2 x 'a' → [q4],
     q3 x 'ε' → [q5],
     q4 x 'ε' → [q5]]
s0 = q0
F = [q5]

[*] Iteration with L( b* ):
NFA = (S, Σ, δ, s0, F)
S = [q0, q1, q2, q3]
Σ = [b, ε]
δ = [q0 x 'ε' → [q1, q3],
     q1 x 'b' → [q2],
     q2 x 'ε' → [q1, q3]]
s0 = q0
F = [q3]

[*] Concat with L( (a|ε)b* ):
NFA = (S, Σ, δ, s0, F)
S = [q00, q01, q02, q03, q04, q05, q06, q07, q08, q09]
Σ = [a, b, ε]
δ = [q00 x 'ε' → [q01, q02],
     q01 x 'ε' → [q03],
     q02 x 'a' → [q04],
     q03 x 'ε' → [q05],
     q04 x 'ε' → [q05],
     q05 x 'ε' → [q06],
     q06 x 'ε' → [q07, q09],
     q07 x 'b' → [q08],
     q08 x 'ε' → [q07, q09]]
s0 = q00
F = [q09]

[*] Iteration with L( ((a|ε)b*)* ):
NFA = (S, Σ, δ, s0, F)
S = [q00, q01, q02, q03, q04, q05, q06, q07, q08, q09, q10, q11]
Σ = [a, b, ε]
δ = [q00 x 'ε' → [q01, q11],
     q01 x 'ε' → [q02, q03],
     q02 x 'ε' → [q04],
     q03 x 'a' → [q05],
     q04 x 'ε' → [q06],
     q05 x 'ε' → [q06],
     q06 x 'ε' → [q07],
     q07 x 'ε' → [q08, q09],
     q08 x 'b' → [q10],
     q09 x 'ε' → [q01, q11],
     q10 x 'ε' → [q08, q09]]
s0 = q00
F = [q11]

[+] NFA done
NFA = (S, Σ, δ, s0, F)
S = [q00, q01, q02, q03, q04, q05, q06, q07, q08, q09, q10, q11]
Σ = [a, b, ε]
δ = [q00 x 'ε' → [q01, q11],
     q01 x 'ε' → [q02, q03],
     q02 x 'ε' → [q04],
     q03 x 'a' → [q05],
     q04 x 'ε' → [q06],
     q05 x 'ε' → [q06],
     q06 x 'ε' → [q07],
     q07 x 'ε' → [q08, q09],
     q08 x 'b' → [q10],
     q09 x 'ε' → [q01, q11],
     q10 x 'ε' → [q08, q09]]
s0 = q00
F = [q11]

[+] Converting to DFA
[*] Initial S_D = [q02q04q01q06q08q07q09q00q11q03]
[*] Checking q02q04q01q06q08q07q09q00q11q03
     T:= move(q02q04q01q06q08q07q09q00q11q03, 'a') = [q05] => epsilon-closure(T) = q05q02q04q01q06q08q07q09q11q03
     q02q04q01q06q08q07q09q00q11q03 x 'a' → [q05q02q04q01q06q08q07q09q11q03]

     T:= move(q02q04q01q06q08q07q09q00q11q03, 'b') = [q10] => epsilon-closure(T) = q02q04q01q06q08q10q07q09q11q03
     q02q04q01q06q08q07q09q00q11q03 x 'b' → [q02q04q01q06q08q10q07q09q11q03]
[*] Checking q05q02q04q01q06q08q07q09q11q03
     T:= move(q05q02q04q01q06q08q07q09q11q03, 'a') = [q05] => epsilon-closure(T) = q05q02q04q01q06q08q07q09q11q03
     q05q02q04q01q06q08q07q09q11q03 x 'a' → [q05q02q04q01q06q08q07q09q11q03]

     T:= move(q05q02q04q01q06q08q07q09q11q03, 'b') = [q10] => epsilon-closure(T) = q02q04q01q06q08q10q07q09q11q03
     q05q02q04q01q06q08q07q09q11q03 x 'b' → [q02q04q01q06q08q10q07q09q11q03]
[*] Checking q02q04q01q06q08q10q07q09q11q03
     T:= move(q02q04q01q06q08q10q07q09q11q03, 'a') = [q05] => epsilon-closure(T) = q05q02q04q01q06q08q07q09q11q03
     q02q04q01q06q08q10q07q09q11q03 x 'a' → [q05q02q04q01q06q08q07q09q11q03]

     T:= move(q02q04q01q06q08q10q07q09q11q03, 'b') = [q10] => epsilon-closure(T) = q02q04q01q06q08q10q07q09q11q03
     q02q04q01q06q08q10q07q09q11q03 x 'b' → [q02q04q01q06q08q10q07q09q11q03]
[*] States and Lambda done
[*] Renaming States
[*] Done

DFA = (S, Σ, δ, s0, F)
S = [q0, q1, q2]
Σ = [a, b]
δ = [q0 x 'a' → [q1], q0 x 'b' → [q2],
     q1 x 'a' → [q1], q1 x 'b' → [q2],
     q2 x 'a' → [q1], q2 x 'b' → [q2]]
s0 = q0
F = [q0, q1, q2]

[+] Minimizing DFA
[*] Building groups
     Π0 = [[q0, q1, q2]]
[*] Groups built
[*] Building DFA_min
[*] Creating S_min
[*] Creating δ_min
[*] Renaming States
[*] Done

DFA = (S, Σ, δ, s0, F)
S = [q0]
Σ = [a, b]
δ = [q0 x 'a' → [q0], q0 x 'b' → [q0]]
s0 = q0
F = [q0]

[+] All tests passed! Conversion and minimization are correct!
[+] Creating .dot and .png files of all FAs generated!
[+] Done

+------------------------------------------------------------------------------+
|                                                                              |
|                                                                              |
+------------------------------------------------------------------------------+

Aufgabe_2_4_b (a|b)*abb(a|b)*
[+] Parsing expression
[+] Parse succsessfull
     (a|b)*abb(a|b)*
[+] Building NFA
[*] Alternative with L( (a|b) ):
NFA = (S, Σ, δ, s0, F)
S = [q0, q1, q2, q3, q4, q5]
Σ = [a, b, ε]
δ = [q0 x 'ε' → [q1, q2],
     q1 x 'b' → [q3],
     q2 x 'a' → [q4],
     q3 x 'ε' → [q5],
     q4 x 'ε' → [q5]]
s0 = q0
F = [q5]

[*] Iteration with L( (a|b)* ):
NFA = (S, Σ, δ, s0, F)
S = [q0, q1, q2, q3, q4, q5, q6, q7]
Σ = [a, b, ε]
δ = [q0 x 'ε' → [q1, q7],
     q1 x 'ε' → [q2, q3],
     q2 x 'b' → [q4],
     q3 x 'a' → [q5],
     q4 x 'ε' → [q6],
     q5 x 'ε' → [q6],
     q6 x 'ε' → [q1, q7]]
s0 = q0
F = [q7]

[*] Concat with L( (a|b)*a ):
NFA = (S, Σ, δ, s0, F)
S = [q00, q01, q02, q03, q04, q05, q06, q07, q08, q09]
Σ = [a, b, ε]
δ = [q00 x 'ε' → [q01, q02],
     q01 x 'ε' → [q03, q04],
     q02 x 'ε' → [q05],
     q03 x 'b' → [q06],
     q04 x 'a' → [q07],
     q05 x 'a' → [q09],
     q06 x 'ε' → [q08],
     q07 x 'ε' → [q08],
     q08 x 'ε' → [q01, q02]]
s0 = q00
F = [q09]

[*] Concat with L( (a|b)*ab ):
NFA = (S, Σ, δ, s0, F)
S = [q00, q01, q02, q03, q04, q05, q06, q07, q08, q09, q10, q11]
Σ = [a, b, ε]
δ = [q00 x 'ε' → [q01, q02],
     q01 x 'ε' → [q03, q04],
     q02 x 'ε' → [q05],
     q03 x 'b' → [q06],
     q04 x 'a' → [q07],
     q05 x 'a' → [q08],
     q06 x 'ε' → [q09],
     q07 x 'ε' → [q09],
     q08 x 'ε' → [q10],
     q09 x 'ε' → [q01, q02],
     q10 x 'b' → [q11]]
s0 = q00
F = [q11]

[*] Concat with L( (a|b)*abb ):
NFA = (S, Σ, δ, s0, F)
S = [q00, q01, q02, q03, q04, q05, q06, q07, q08, q09, q10, q11, q12, q13]
Σ = [a, b, ε]
δ = [q00 x 'ε' → [q01, q02],
     q01 x 'ε' → [q03, q04],
     q02 x 'ε' → [q05],
     q03 x 'b' → [q06],
     q04 x 'a' → [q07],
     q05 x 'a' → [q08],
     q06 x 'ε' → [q09],
     q07 x 'ε' → [q09],
     q08 x 'ε' → [q10],
     q09 x 'ε' → [q01, q02],
     q10 x 'b' → [q11],
     q11 x 'ε' → [q12],
     q12 x 'b' → [q13]]
s0 = q00
F = [q13]

[*] Alternative with L( (a|b) ):
NFA = (S, Σ, δ, s0, F)
S = [q0, q1, q2, q3, q4, q5]
Σ = [a, b, ε]
δ = [q0 x 'ε' → [q1, q2],
     q1 x 'a' → [q3],
     q2 x 'b' → [q4],
     q3 x 'ε' → [q5],
     q4 x 'ε' → [q5]]
s0 = q0
F = [q5]

[*] Iteration with L( (a|b)* ):
NFA = (S, Σ, δ, s0, F)
S = [q0, q1, q2, q3, q4, q5, q6, q7]
Σ = [a, b, ε]
δ = [q0 x 'ε' → [q1, q7],
     q1 x 'ε' → [q2, q3],
     q2 x 'a' → [q4],
     q3 x 'b' → [q5],
     q4 x 'ε' → [q6],
     q5 x 'ε' → [q6],
     q6 x 'ε' → [q1, q7]]
s0 = q0
F = [q7]

[*] Concat with L( (a|b)*abb(a|b)* ):
NFA = (S, Σ, δ, s0, F)
S = [q00, q01, q02, q03, q04, q05, q06, q07, q08, q09, q10, q11, q12, q13, q14, q15, q16, q17, q18, q19, q20, q21]
Σ = [a, b, ε]
δ = [q00 x 'ε' → [q01, q02],
     q01 x 'ε' → [q03, q04],
     q02 x 'ε' → [q05],
     q03 x 'b' → [q06],
     q04 x 'a' → [q07],
     q05 x 'a' → [q08],
     q06 x 'ε' → [q09],
     q07 x 'ε' → [q09],
     q08 x 'ε' → [q10],
     q09 x 'ε' → [q01, q02],
     q10 x 'b' → [q11],
     q11 x 'ε' → [q12],
     q12 x 'b' → [q13],
     q13 x 'ε' → [q14],
     q14 x 'ε' → [q15, q21],
     q15 x 'ε' → [q16, q17],
     q16 x 'a' → [q18],
     q17 x 'b' → [q19],
     q18 x 'ε' → [q20],
     q19 x 'ε' → [q20],
     q20 x 'ε' → [q15, q21]]
s0 = q00
F = [q21]

[+] NFA done
NFA = (S, Σ, δ, s0, F)
S = [q00, q01, q02, q03, q04, q05, q06, q07, q08, q09, q10, q11, q12, q13, q14, q15, q16, q17, q18, q19, q20, q21]
Σ = [a, b, ε]
δ = [q00 x 'ε' → [q01, q02],
     q01 x 'ε' → [q03, q04],
     q02 x 'ε' → [q05],
     q03 x 'b' → [q06],
     q04 x 'a' → [q07],
     q05 x 'a' → [q08],
     q06 x 'ε' → [q09],
     q07 x 'ε' → [q09],
     q08 x 'ε' → [q10],
     q09 x 'ε' → [q01, q02],
     q10 x 'b' → [q11],
     q11 x 'ε' → [q12],
     q12 x 'b' → [q13],
     q13 x 'ε' → [q14],
     q14 x 'ε' → [q15, q21],
     q15 x 'ε' → [q16, q17],
     q16 x 'a' → [q18],
     q17 x 'b' → [q19],
     q18 x 'ε' → [q20],
     q19 x 'ε' → [q20],
     q20 x 'ε' → [q15, q21]]
s0 = q00
F = [q21]

[+] Converting to DFA
[*] Initial S_D = [q03q01q00q02q05q04]
[*] Checking q03q01q00q02q05q04
     T:= move(q03q01q00q02q05q04, 'a') = [q07, q08] => epsilon-closure(T) = q07q03q01q09q02q05q08q10q04
     q03q01q00q02q05q04 x 'a' → [q07q03q01q09q02q05q08q10q04]

     T:= move(q03q01q00q02q05q04, 'b') = [q06] => epsilon-closure(T) = q03q06q01q09q02q05q04
     q03q01q00q02q05q04 x 'b' → [q03q06q01q09q02q05q04]
[*] Checking q07q03q01q09q02q05q08q10q04
     T:= move(q07q03q01q09q02q05q08q10q04, 'a') = [q07, q08] => epsilon-closure(T) = q07q03q01q09q02q05q08q10q04
     q07q03q01q09q02q05q08q10q04 x 'a' → [q07q03q01q09q02q05q08q10q04]

     T:= move(q07q03q01q09q02q05q08q10q04, 'b') = [q06, q11] => epsilon-closure(T) = q03q06q01q09q02q05q11q12q04
     q07q03q01q09q02q05q08q10q04 x 'b' → [q03q06q01q09q02q05q11q12q04]
[*] Checking q03q06q01q09q02q05q04
     T:= move(q03q06q01q09q02q05q04, 'a') = [q07, q08] => epsilon-closure(T) = q07q03q01q09q02q05q08q10q04
     q03q06q01q09q02q05q04 x 'a' → [q07q03q01q09q02q05q08q10q04]

     T:= move(q03q06q01q09q02q05q04, 'b') = [q06] => epsilon-closure(T) = q03q06q01q09q02q05q04
     q03q06q01q09q02q05q04 x 'b' → [q03q06q01q09q02q05q04]
[*] Checking q03q06q01q09q02q05q11q12q04
     T:= move(q03q06q01q09q02q05q11q12q04, 'a') = [q07, q08] => epsilon-closure(T) = q07q03q01q09q02q05q08q10q04
     q03q06q01q09q02q05q11q12q04 x 'a' → [q07q03q01q09q02q05q08q10q04]

     T:= move(q03q06q01q09q02q05q11q12q04, 'b') = [q06, q13] => epsilon-closure(T) = q15q14q21q04q03q06q01q09q02q05q13q16q17
     q03q06q01q09q02q05q11q12q04 x 'b' → [q15q14q21q04q03q06q01q09q02q05q13q16q17]
[*] Checking q15q14q21q04q03q06q01q09q02q05q13q16q17
     T:= move(q15q14q21q04q03q06q01q09q02q05q13q16q17, 'a') = [q07, q08, q18] => epsilon-closure(T) = q15q20q21q04q07q03q01q09q02q05q08q10q16q18q17
     q15q14q21q04q03q06q01q09q02q05q13q16q17 x 'a' → [q15q20q21q04q07q03q01q09q02q05q08q10q16q18q17]

     T:= move(q15q14q21q04q03q06q01q09q02q05q13q16q17, 'b') = [q19, q06] => epsilon-closure(T) = q19q15q20q21q04q03q06q01q09q02q05q16q17
     q15q14q21q04q03q06q01q09q02q05q13q16q17 x 'b' → [q19q15q20q21q04q03q06q01q09q02q05q16q17]
[*] Checking q15q20q21q04q07q03q01q09q02q05q08q10q16q18q17
     T:= move(q15q20q21q04q07q03q01q09q02q05q08q10q16q18q17, 'a') = [q07, q08, q18] => epsilon-closure(T) = q15q20q21q04q07q03q01q09q02q05q08q10q16q18q17
     q15q20q21q04q07q03q01q09q02q05q08q10q16q18q17 x 'a' → [q15q20q21q04q07q03q01q09q02q05q08q10q16q18q17]

     T:= move(q15q20q21q04q07q03q01q09q02q05q08q10q16q18q17, 'b') = [q19, q06, q11] => epsilon-closure(T) = q19q15q20q21q04q03q06q01q09q02q05q11q12q16q17
     q15q20q21q04q07q03q01q09q02q05q08q10q16q18q17 x 'b' → [q19q15q20q21q04q03q06q01q09q02q05q11q12q16q17]
[*] Checking q19q15q20q21q04q03q06q01q09q02q05q16q17
     T:= move(q19q15q20q21q04q03q06q01q09q02q05q16q17, 'a') = [q07, q08, q18] => epsilon-closure(T) = q15q20q21q04q07q03q01q09q02q05q08q10q16q18q17
     q19q15q20q21q04q03q06q01q09q02q05q16q17 x 'a' → [q15q20q21q04q07q03q01q09q02q05q08q10q16q18q17]

     T:= move(q19q15q20q21q04q03q06q01q09q02q05q16q17, 'b') = [q19, q06] => epsilon-closure(T) = q19q15q20q21q04q03q06q01q09q02q05q16q17
     q19q15q20q21q04q03q06q01q09q02q05q16q17 x 'b' → [q19q15q20q21q04q03q06q01q09q02q05q16q17]
[*] Checking q19q15q20q21q04q03q06q01q09q02q05q11q12q16q17
     T:= move(q19q15q20q21q04q03q06q01q09q02q05q11q12q16q17, 'a') = [q07, q08, q18] => epsilon-closure(T) = q15q20q21q04q07q03q01q09q02q05q08q10q16q18q17
     q19q15q20q21q04q03q06q01q09q02q05q11q12q16q17 x 'a' → [q15q20q21q04q07q03q01q09q02q05q08q10q16q18q17]

     T:= move(q19q15q20q21q04q03q06q01q09q02q05q11q12q16q17, 'b') = [q19, q06, q13] => epsilon-closure(T) = q19q15q20q14q21q04q03q06q01q09q02q05q13q16q17
     q19q15q20q21q04q03q06q01q09q02q05q11q12q16q17 x 'b' → [q19q15q20q14q21q04q03q06q01q09q02q05q13q16q17]
[*] Checking q19q15q20q14q21q04q03q06q01q09q02q05q13q16q17
     T:= move(q19q15q20q14q21q04q03q06q01q09q02q05q13q16q17, 'a') = [q07, q08, q18] => epsilon-closure(T) = q15q20q21q04q07q03q01q09q02q05q08q10q16q18q17
     q19q15q20q14q21q04q03q06q01q09q02q05q13q16q17 x 'a' → [q15q20q21q04q07q03q01q09q02q05q08q10q16q18q17]

     T:= move(q19q15q20q14q21q04q03q06q01q09q02q05q13q16q17, 'b') = [q19, q06] => epsilon-closure(T) = q19q15q20q21q04q03q06q01q09q02q05q16q17
     q19q15q20q14q21q04q03q06q01q09q02q05q13q16q17 x 'b' → [q19q15q20q21q04q03q06q01q09q02q05q16q17]
[*] States and Lambda done
[*] Renaming States
[*] Done

DFA = (S, Σ, δ, s0, F)
S = [q0, q1, q2, q3, q4, q5, q6, q7, q8]
Σ = [a, b]
δ = [q0 x 'a' → [q1], q0 x 'b' → [q2],
     q1 x 'a' → [q1], q1 x 'b' → [q3],
     q2 x 'a' → [q1], q2 x 'b' → [q2],
     q3 x 'a' → [q1], q3 x 'b' → [q4],
     q4 x 'a' → [q5], q4 x 'b' → [q6],
     q5 x 'a' → [q5], q5 x 'b' → [q7],
     q6 x 'a' → [q5], q6 x 'b' → [q6],
     q7 x 'a' → [q5], q7 x 'b' → [q8],
     q8 x 'a' → [q5], q8 x 'b' → [q6]]
s0 = q0
F = [q4, q5, q6, q7, q8]

[+] Minimizing DFA
[*] Building groups
     Π0 = [[q4, q5, q6, q7, q8], [q0, q1, q2, q3]]
          Splitting [q0, q1, q2, q3] into [q0, q1, q2] and [q3]

     Π1 = [[q4, q5, q6, q7, q8], [q0, q1, q2], [q3]]
          Splitting [q0, q1, q2] into [q0, q2] and [q1]

     Π2 = [[q4, q5, q6, q7, q8], [q0, q2], [q1], [q3]]
[*] Groups built
[*] Building DFA_min
[*] Creating S_min
[*] Creating δ_min
[*] Renaming States
[*] Done

DFA = (S, Σ, δ, s0, F)
S = [q0, q1, q2, q3]
Σ = [a, b]
δ = [q0 x 'a' → [q1], q0 x 'b' → [q0],
     q1 x 'a' → [q1], q1 x 'b' → [q2],
     q2 x 'a' → [q1], q2 x 'b' → [q3],
     q3 x 'a' → [q3], q3 x 'b' → [q3]]
s0 = q0
F = [q3]

[+] All tests passed! Conversion and minimization are correct!
[+] Creating .dot and .png files of all FAs generated!
[+] Done

