Exercise 1:

1.1
a)   ┌─────┐ Forward Engi ┌─────┐ Forward Engi ┌─────┐
     │     │     -->      │     │     -->      │     │
     │     │              │     │              │     │
     │     │ Reverse Engi │     │ Reverse Engi │     │
     └─────┘     <--      └─────┘     <--      └─────┘
  Specification           Design            Impementation
b) Disassemble
c) Decompile

1.2
a) Intel x86  (IA32)   [x86_64]
b) Ring 3 : Usermode [Least privileged / Applications]
   Ring 2 : Treiber  [unused]
   Ring 1 : [unused]
   Ring 0 : Kernelmode [supervisor mode / Kernel]
   Ring -1: Hypervisor [Virtualization VT-x]
   Ring -2: System Management Mode [Power management]
   Ring -3: Intel Active Management Technology [Remote out-of-band management]

1.3
a)
lines = [[0x53, 0x6f, 0x66, 0x74, 0x77, 0x61, 0x72, 0x65],
         [0x52, 0x65, 0x76, 0x65, 0x72, 0x73, 0x65, 0x45],
         [0x6e, 0x67, 0x69, 0x6e, 0x65, 0x65, 0x72, 0x69],
         [0x6e, 0x67]]

for line in lines:
  print ''.join(map(chr, line))

  Software
  ReverseE
  ngineeri
  ng
b)1234567 <=hex()=> 0x0012d687 <=LittleEndian=> 0x87d61200
c)1234567 <=hex()=> 0x0012d687

import struct

struct.pack('<I', 1234567).encode('hex')

1.4
a) 3 + 0x8 = 0xB
b) 2 * 0x10 = 0x20
c) 0x10 * 0x10 = 0x100
d) 0x1000 - 1 = 0xFFF
e) 0b101010 & 0b010101 = 0x0
f) 0b101010 ^ 0b010101 = 0b111111 = 0x3F
g) 0b10 + 0x10 = 0x2 + 0x10 = 0x12